import React, { Component } from "react"
import styles from "./styles.module.css"
import "react-clock/dist/Clock.css"
import { withRouter, Link } from "react-router-dom"
import { S3Url, masterPW } from "../../helpers.js"
import LockModal from "../UI/LockModal"
import txt from "../../text/er.json"
import ZoomModal from "../UI/ZoomModal"
import FeedbackBarToggle from "../UI/FeedbackBarToggle"
import { Button } from "@material-ui/core"

const hallway1 = {
  left: "82.33%",
  top: "47.88%",
  width: "9%",
  height: "31.37%",
  position: "absolute",
  display: "block",
  zIndex: "5",
  overflow: "hidden",
}

const hallway2 = {
  left: "7%",
  top: "48.25%",
  width: "9%",
  height: "31.37%",
  position: "absolute",
  display: "block",
  zIndex: "5",
  overflow: "hidden",
}

const portal = {
  left: "55.42%",
  top: "58.25%",
  width: "1.67%",
  height: "4.13%",
  position: "absolute",
  display: "block",
  zIndex: "5",
  overflow: "hidden",
}

const monitor = {
  left: "23.83%",
  top: "68%",
  width: "10.58%",
  height: "9%",
  position: "absolute",
  display: "block",
  zIndex: "5",
  overflow: "hidden",
}

const trash = {
  left: "53.17%",
  top: "87.38%",
  width: "7.08%",
  height: "12.25%",
  position: "absolute",
  display: "block",
  zIndex: "5",
  overflow: "hidden",
}

class Main extends Component {
  constructor(props) {
    super(props)
    this.state = {
      clickSewer: false,
      portalDenied: false,
      mcSet: false,
    }
  }

  componentDidUpdate(prevProps) {
    if (
      prevProps.mcSpy !== this.props.mcSpy ||
      prevProps.mcMerchant !== this.props.mcMerchant ||
      prevProps.mcMechanic !== this.props.mcMechanic
    ) {
      this.setState({
        mcSet:
          this.props.mcSpy === 7 ||
          this.props.mcMerchant === 7 ||
          this.props.mcMechanic === 7,
      })
    }
  }

  componentDidMount() {
    this.setState({
      mcSet:
        this.props.mcSpy === 7 ||
        this.props.mcMerchant === 7 ||
        this.props.mcMechanic === 7,
    })
  }

  componentWillUnmount() {
    clearInterval(this.state.interval)
  }

  handleSubmitLockers = (code) => {
    if (code === masterPW || code === "53110") {
      this.props.putLockersUnlocked()
      return true
    } else {
      return false
    }
  }

  lockedLockers = () => {
    return (
      <LockModal
        className={styles.lockers}
        handleSubmit={this.handleSubmitLockers}
      />
    )
  }

  render() {
    if (this.props.lockersUnlocked === null) return null
    return (
      <>
        {/* Image Map Generated by https://12oss.github.io/linkresponsively/ */}

        <img src={S3Url + "/er/MainRoom.png"} width="100%" />
        {this.props.lockersUnlocked ? (
          <Link style={hallway1} to="/er/hallway1" />
        ) : (
          <FeedbackBarToggle style={hallway1} text={txt.leaveMain} />
        )}
        {this.props.lockersUnlocked ? (
          <Link style={hallway2} to="/er/hallway2" />
        ) : (
          <FeedbackBarToggle style={hallway2} text={txt.leaveMain} />
        )}
        <FeedbackBarToggle style={trash} text={txt.trash} />
        <img className={styles.clock} src={S3Url + "/er/clock.png"} />
        {this.props.lockersUnlocked ? (
          <Link to="/er/lockers" className={styles.lockers} />
        ) : (
          this.lockedLockers()
        )}

        {this.props.spyroomUnlocked ? (
          <Link to="/er/spy" className={styles.sewer} />
        ) : this.props.equipped === "paperclip" ? (
          <div
            onClick={this.props.putSpyroomUnlocked}
            className={styles.sewer}
            style={{ cursor: `url(${S3Url}/er/paperclip_cursor.png), auto` }}
          />
        ) : (
          <FeedbackBarToggle text={txt.sewerDenied} className={styles.sewer} />
        )}
        <ZoomModal style={monitor}>
          <p>
            The exit to the headquarters can only be opened with the help of several access cards
            scattered around the area. These access cards belong to 3 teammates that have left for the day.
            There are 9 cards total, 3 each of a color: find all of them to unlock the exit from the main
            room. Click on a door to move from room to room. Some rooms are locked and you’ll need to either
            enter a code on the number pad next to the door, or find another way inside. Certain items can
            be picked up and will be added to your inventory (accessed by clicking the button on the bottom
            right). To equip and item, go into the inventory, click on an item, then press ‘equip’.
            To unequip it, simply press ‘unequip’. If you ever feel starting from the beginning, you can
            reset everything by pressing ‘reset’.
          </p>
        </ZoomModal>
        <div onClick={this.props.submitFinalPuzzle}>
          <ZoomModal style={portal} >
            {this.props.done ? <>
              <h1>You have now collected all the pieces just in time to leave and go to the awards ceremony! Congratulations!
              </h1>
              <Link to='/leaderboard'><Button>Leaderboard</Button></Link>
            </> :
              <h1>You don't seem to have all the keys yet. Keep looking!</h1>}
          </ZoomModal>
        </div>
      </>
    )
  }
}
export default withRouter(Main)
